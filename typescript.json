{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// ~ Run using script at /Users/joey/Library/Mobile Documents/com~apple~CloudDocs/Strong/convertFileToSnippetBody.py
	"SailsJs Action2": {
		"prefix": "sailsAction",
		"body": [
			"import moment from 'moment';",
			"import { SailsModelType, sailsVegi } from '../../interfaces/iSails';",
			"import { datetimeStrFormat, OrderType } from '../../../scripts/utils';",
			"",
			"declare var sails: sailsVegi;",
			"declare var Order: SailsModelType<OrderType>;",
			"",
			"",
			"type _${1:ActionName}InputsType = {",
			"  ",
			"};",
			"",
			"type _${1:ActionName}ResponseType = {",
			"  ",
			"};",
			"",
			"const _exports = {",
			"  friendlyName: '',",
			"",
			"  description: '',",
			"",
			"  inputs: {",
			"    walletId: {",
			"      type: 'string',",
			"      required: true,",
			"    },",
			"  },",
			"",
			"  exits: {",
			"    success: {",
			"      viewTemplatePath: 'pages/orders/my-orders',",
			"    },",
			"    successJSON: {",
			"      statusCode: 200,",
			"    },",
			"    issue: {",
			"      statusCode: 400,",
			"    },",
			"    notFound: {",
			"      statusCode: 404,",
			"    },",
			"  },",
			"",
			"  fn: async function (",
			"    inputs: _${1:ActionName}InputsType,",
			"    exits: {",
			"      success: (unused: _${1:ActionName}ResponseType) => _${1:ActionName}ResponseType;",
			"      successJSON: (unused: _${1:ActionName}ResponseType) => _${1:ActionName}ResponseType;",
			"      issue: (unusedMessage: Error | string) => void;",
			"      notFound: (unusedMessage: Error | string) => void;",
			"    }",
			"  ) {",
			"",
			"    let _ongoingOrders: Array<OrderType>;",
			"    let _scheduledOrders: Array<OrderType>;",
			"    let timeNow = moment.utc().format(datetimeStrFormat); // e.g. 25/12/2022 09:00",
			"    let timeToScheduledOrdersStart = moment",
			"      .utc()",
			"      .add(sails.config.custom.ongoingOrdersHoursCutoff, 'hours')",
			"      .format(datetimeStrFormat); // e.g. 25/12/2022 17:00",
			"    if (sails.getDatastore().config.adapter === 'sails-disk') {",
			"      const _orders = await Order.find({",
			"        customerWalletAddress: inputs.walletId,",
			"        paidDateTime: { '>': 0 },",
			"        completedFlag: '',",
			"      }).populate(",
			"        'fulfilmentMethod&deliveryPartner&vendor&items.product&optionValues&optionValues.option&optionValue'",
			"      );",
			"      if (_orders.length > 0) {",
			"        // stuff",
			"      }",
			"    } else {",
			"      _ongoingOrders = await Order.find({",
			"        customerWalletAddress: inputs.walletId,",
			"        paidDateTime: { '>': 0 },",
			"        completedFlag: '',",
			"        fulfilmentSlotFrom: { '>=': timeNow },",
			"        fulfilmentSlotTo: { '<=': timeToScheduledOrdersStart },",
			"      }).populate(",
			"        'fulfilmentMethod&deliveryPartner&vendor&items.product&optionValues&optionValues.option&optionValue'",
			"      );",
			"      _scheduledOrders = await Order.find({",
			"        customerWalletAddress: inputs.walletId,",
			"        paidDateTime: { '>': 0 },",
			"        completedFlag: '',",
			"        fulfilmentSlotFrom: { '>': timeToScheduledOrdersStart },",
			"      }).populate(",
			"        'fulfilmentMethod&deliveryPartner&vendor&items.product&optionValues&optionValues.option&optionValue'",
			"      );",
			"    }",
			"",
			"    const result:_${1:ActionName}ResponseType = {};",
			"    // Respond with view or JSON.",
			"    if (this.req.wantsJSON) {",
			"      return exits.successJSON(result);",
			"    } else {",
			"      return exits.success(result);",
			"    }",
			"  },",
			"};",
			"",
			"export type ${1:ActionName}ResponseType = Awaited<ReturnType<typeof _exports.fn>> & _${1:ActionName}ResponseType;",
			"",
			"export type ${1:ActionName}Inputs = {",
			"  [key in keyof typeof _exports.inputs]: typeof _exports.inputs[key]['type'] extends 'string'",
			"    ? string",
			"    : typeof _exports.inputs[key]['type'] extends 'number'",
			"    ? number",
			"    : typeof _exports.inputs[key]['type'] extends 'boolean'",
			"    ? boolean",
			"    : any;",
			"} & {",
			"  // ... type overrides here",
			"} & _${1:ActionName}InputsType;",
			"",
			"module.exports = _exports;",
		],
		"description": "Scaffold for SailsJs Action2"
	}
}